import pygame
pygame.init()
import math
import random
import time
from perlin_noise import PerlinNoise


xval = 1500
yval = 1000
limit = 15
torch = 10
chunk = 5
wide = 30
fps = 30





daytime1 = (173,216,230)
daytime2 = (129,162,172)
evening = (40,50,100)
night = (20,20,20)
midnight = (10,10,10)
morning = (80,70,35)
cycle = [daytime1,daytime2,morning,night,midnight,morning]
length = len(cycle)
now = 0
changer = [0,0,0]
bg = list(cycle[now])


pygame.event.set_allowed([pygame.QUIT, pygame.KEYDOWN, pygame.KEYUP])

size = max(xval,yval)
wn = pygame.display.set_mode((xval,yval),pygame.RESIZABLE)
verticies = [(-0.5,0.5,-0.5),(-0.5,-0.5,-0.5),(0.5,-0.5,-0.5),(0.5,0.5,-0.5),(0.5,0.5,0.5),(-0.5,0.5,0.5),(-0.5,-0.5,0.5),(0.5,-0.5,0.5)]
edges = [(0,1),(0,3),(1,2),(2,3),(0,5),(5,4),(3,4),(1,6),(2,7),(7,4),(6,7),(5,6)]
faces = [(2,1,6,7),(0,1,2,3),(4,5,6,7),(0,3,4,5),(0,1,6,5),(3,4,7,2)]

dirt_color = [(128,199,31),(145,100,20),(145,100,30),(140,100,0),(140,100,20),(130,90,20)]

stone_color = [(90,90,90),(80,80,80),(100,100,100),(95,95,95),(110,110,110),(100,100,100)]

sand_color = [(190, 174, 124),(204, 188, 138),(184, 168, 118),(194, 178, 128),(185, 165, 118),(194, 178, 128)]

wood_color = [(200,145,90),(85,60,40),(85,55,55),(190,135,80),(80,60,48),(80,60,45)]

leaf_color = [(100,175,25),(118,189,21),(128,199,31),(115,180,25),(110,189,21),(128,179,11)]

water_color = [(100,100,255),(50,50,255),(30,30,255),(75,75,255),(80,80,255),(90,90,255)]

glowstone_color = [(255,255,0),(245,245,0),(235,235,0),(250,250,0),(240,240,0),(220,220,0)]
colors = [dirt_color,stone_color,sand_color,wood_color,leaf_color,glowstone_color,water_color]
def lightup(cubes):
    l = []
    
    for i in cubes:
        
        if i[3] == colors.index(glowstone_color):
            
            l.append(i)
    
    return l


            
class PLAYER():
    def __init__(self,cubes):
        
        self.lightsources = lightup(cubes)
        self.x_og = 0
        self.y_og = -5
        self.z_og = 0
        
        self.x = self.x_og
        self.y = self.y_og
        self.z = self.z_og
        
        self.chunkin = Hash2((self.x,self.y,self.z))+1
        self.chunkin2 = Hash2((self.x,self.y,self.z))

        self.inwater = False
        
        self.anglex = 1
        self.angley = 1
        self.FOV_OG = 90
        self.FOV = self.FOV_OG
        self.calculation = int(size/2*math.tan(math.radians(self.FOV_OG/2)) + 0.5)
        
        
        self.speed = 0.25
        
        self.anglespeed = 7.5
        self.gravity = 0.075
        self.velocity = 0
        self.xvelocity = 0
        self.zvelocity = 0
        self.jump = 0.6 
        self.mode = "survival"
        self.timer = 0
        self.timerlimit = 1
        self.chosenblock = 0
        self.inventory = [5,0,1,2,3,4,6,7,8]
    def DISTANCE(self,pointa,pointb):
        return math.sqrt((pointa[0]-pointb[0])**2+(pointa[1]-pointb[1])**2)
    def PLACE(self,cubes):
        cubes2 = []
        for cube in cubes:
            cubes2.append((math.sqrt((cube[0]-self.x)**2+(cube[1]-self.y)**2+(cube[2]-self.z)**2),cube[0],cube[1],cube[2],cube[3]))
            
        cubes2.sort()
        for cube in cubes2:
            draw_sides = []
            for face in faces:
                sides = []
                for vertex in (verticies[face[0]],verticies[face[1]],verticies[face[2]],verticies[face[3]]):
                    old_x = vertex[0]-self.x+cube[1]
                    old_y = vertex[1]-self.y+cube[2]
                    old_z = vertex[2]-self.z+cube[3]
                    
                    sides.append([old_x,old_y,old_z])
                        
                
                x = (sides[0][0]+sides[1][0]+sides[2][0]+sides[3][0])/4
                y = (sides[0][1]+sides[1][1]+sides[2][1]+sides[3][1])/4
                z = (sides[0][2]+sides[1][2]+sides[2][2]+sides[3][2])/4
                dis = math.sqrt(x**2+y**2+z**2)
                draw_sides.append(dis)
                
            draw_sides2 = draw_sides.copy() 
            draw_sides2.sort()
            faces1 = draw_sides.index(draw_sides2[0])
            faces2 = draw_sides.index(draw_sides2[1])
            faces3 = draw_sides.index(draw_sides2[2])
            faces4 = draw_sides.index(draw_sides2[3])
            faces5 = draw_sides.index(draw_sides2[4])
            faces6 = draw_sides.index(draw_sides2[5])
            for face in (faces[faces1],faces[faces2],faces[faces3],faces[faces4],faces[faces5],faces[faces6]):
                sides = []
                for vertex in (verticies[face[0]],verticies[face[1]],verticies[face[2]],verticies[face[3]]):
                    old_x = vertex[0]-self.x+cube[1]
                    old_y = vertex[1]-self.y+cube[2]
                    old_z = vertex[2]-self.z+cube[3]
                    
                    old_x,old_z = old_x*math.cos(self.anglex*math.pi/180)-old_z*math.sin(self.anglex*math.pi/180),old_z*math.cos(self.anglex*math.pi/180)+old_x*math.sin(self.anglex*math.pi/180)
                    old_y,old_z = old_y*math.cos(self.angley*math.pi/180)-old_z*math.sin(self.angley*math.pi/180),old_z*math.cos(self.angley*math.pi/180)+old_y*math.sin(self.angley*math.pi/180)
                    
                    if old_z>0:
                        #new_x = math.degrees(math.atan(old_x/(old_z+0.001)))/PLAYER.FOV*xval
                        #new_y = math.degrees(math.atan(old_y/(old_z+0.001)))/PLAYER.FOV*yval
                        new_x = PLAYER.calculation/old_z * old_x
                        new_y = PLAYER.calculation/old_z * old_y
                        new_x+=xval//2
                        new_y+=yval//2
                        
                        
                        sides.append([new_x,new_y])
                                            
                if len(sides)>=4:
                    points = [sides[0],sides[1],sides[2],sides[3]]
                    
                    times = 0
                    for i in range(4):
                        i2 = (i+1)%4
                        if points[i][0]-points[i2][0] != 0:
                            slope = (points[i][1]-points[i2][1])/(points[i][0]-points[i2][0])
                            
                            if slope!=0:
                                c = points[i][1]-slope*points[i][0]
                                x = (yval//2-c)/slope
                                y = yval//2
                                if x>xval//2 and y>min(points[i][1],points[i2][1]) and y<max(points[i][1],points[i2][1]):
                                    times+=1
                                    
                        #a = self.DISTANCE(points[i],(xval//2,yval//2))
                        #b = self.DISTANCE(points[(i+1)%4],(xval//2,yval//2))
                        #c = self.DISTANCE(points[0],points[1])
                        #angles += math.degrees(math.acos(max(min( (a**2+b**2-c**2) / (2*a*b),1),0)))
                        
                    if times/2 != times//2:
                        #Cube = cubes[cubes.index((cube[1],cube[2],cube[3],cube[4],cube[5]))]
                        Cube = (cube[1],cube[2],cube[3],cube[4])
                        if faces.index(face)==0:
                            cubes.append((Cube[0],Cube[1]-1,Cube[2],self.inventory[self.chosenblock]))
                            Place((Cube[0],Cube[1]-1,Cube[2],self.inventory[self.chosenblock]))
                            return True
                        
                        if faces.index(face)==1:
                            cubes.append((Cube[0],Cube[1],Cube[2]-1,self.inventory[self.chosenblock]))
                            Place((Cube[0],Cube[1],Cube[2]-1,self.inventory[self.chosenblock]))

                            return True
                        if faces.index(face)==2:
                            cubes.append((Cube[0],Cube[1],Cube[2]+1,self.inventory[self.chosenblock]))
                            Place((Cube[0],Cube[1],Cube[2]+1,self.inventory[self.chosenblock]))
                            return True
                        
                        if faces.index(face)==3:
                            cubes.append((Cube[0],Cube[1]+1,Cube[2],self.inventory[self.chosenblock]))
                            Place((Cube[0],Cube[1]+1,Cube[2],self.inventory[self.chosenblock]))
                            return True
                        
                        if faces.index(face)==4:
                            cubes.append((Cube[0]-1,Cube[1],Cube[2],self.inventory[self.chosenblock]))
                            Place((Cube[0]-1,Cube[1],Cube[2],self.inventory[self.chosenblock]))
                            return True
                        
                        if faces.index(face)==5:
                            cubes.append((Cube[0]+1,Cube[1],Cube[2],self.inventory[self.chosenblock]))
                            Place((Cube[0]+1,Cube[1],Cube[2],self.inventory[self.chosenblock]))
                            return True
    def REMOVE(self,cubes):
        cubes2 = []
        for cube in cubes:
            cubes2.append((math.sqrt((cube[0]-self.x)**2+(cube[1]-self.y)**2+(cube[2]-self.z)**2),cube[0],cube[1],cube[2],cube[3]))
            
        cubes2.sort()
        for cube in cubes2:
            draw_sides = []
            for face in faces:
                sides = []
                for vertex in (verticies[face[0]],verticies[face[1]],verticies[face[2]],verticies[face[3]]):
                    old_x = vertex[0]-self.x+cube[1]
                    old_y = vertex[1]-self.y+cube[2]
                    old_z = vertex[2]-self.z+cube[3]
                    
                    sides.append([old_x,old_y,old_z])
                        
                
                x = (sides[0][0]+sides[1][0]+sides[2][0]+sides[3][0])/4
                y = (sides[0][1]+sides[1][1]+sides[2][1]+sides[3][1])/4
                z = (sides[0][2]+sides[1][2]+sides[2][2]+sides[3][2])/4
                dis = math.sqrt(x**2+y**2+z**2)
                draw_sides.append(dis)
                
            draw_sides2 = draw_sides.copy() 
            draw_sides2.sort()
            faces1 = draw_sides.index(draw_sides2[0])
            faces2 = draw_sides.index(draw_sides2[1])
            faces3 = draw_sides.index(draw_sides2[2])
            faces4 = draw_sides.index(draw_sides2[3])
            faces5 = draw_sides.index(draw_sides2[4])
            faces6 = draw_sides.index(draw_sides2[5])
            for face in (faces[faces1],faces[faces2],faces[faces3],faces[faces4],faces[faces5],faces[faces6]):
                sides = []
                for vertex in (verticies[face[0]],verticies[face[1]],verticies[face[2]],verticies[face[3]]):
                    old_x = vertex[0]-self.x+cube[1]
                    old_y = vertex[1]-self.y+cube[2]
                    old_z = vertex[2]-self.z+cube[3]
                    
                    old_x,old_z = old_x*math.cos(self.anglex*math.pi/180)-old_z*math.sin(self.anglex*math.pi/180),old_z*math.cos(self.anglex*math.pi/180)+old_x*math.sin(self.anglex*math.pi/180)
                    old_y,old_z = old_y*math.cos(self.angley*math.pi/180)-old_z*math.sin(self.angley*math.pi/180),old_z*math.cos(self.angley*math.pi/180)+old_y*math.sin(self.angley*math.pi/180)
                    
                    if old_z>0:
                        #new_x = math.degrees(math.atan(old_x/(old_z+0.001)))/PLAYER.FOV*xval
                        #new_y = math.degrees(math.atan(old_y/(old_z+0.001)))/PLAYER.FOV*yval
                        new_x = PLAYER.calculation/old_z * old_x
                        new_y = PLAYER.calculation/old_z * old_y
                        new_x+=xval//2
                        new_y+=yval//2
                        
                        
                        sides.append([new_x,new_y])
                                            
                if len(sides)>=4:
                    points = [sides[0],sides[1],sides[2],sides[3]]
                    
                    times = 0
                    for i in range(4):
                        i2 = (i+1)%4
                        if points[i][0]-points[i2][0] != 0:
                            slope = (points[i][1]-points[i2][1])/(points[i][0]-points[i2][0])
                            
                            if slope!=0:
                                c = points[i][1]-slope*points[i][0]
                                x = (yval//2-c)/slope
                                y = yval//2
                                if x>xval//2 and y>min(points[i][1],points[i2][1]) and y<max(points[i][1],points[i2][1]):
                                    times+=1
                                    
                        #a = self.DISTANCE(points[i],(xval//2,yval//2))
                        #b = self.DISTANCE(points[(i+1)%4],(xval//2,yval//2))
                        #c = self.DISTANCE(points[0],points[1])
                        #angles += math.degrees(math.acos(max(min( (a**2+b**2-c**2) / (2*a*b),1),0)))
                        
                    if times/2 != times//2:
                        #Cube = cubes[cubes.index((cube[1],cube[2],cube[3],cube[4],cube[5]))]
                        Cube = (cube[1],cube[2],cube[3],cube[4])
                        cubes.remove(Cube)
                        Remove(Cube)
                        return True
                        
            
    def JUMP(self):
        key = pygame.key.get_pressed()
        if key[pygame.K_SPACE]:
            self.velocity=-self.jump
    def SLIDE(self,friction):
        self.zvelocity*=friction
        self.xvelocity*=friction
    def MOVE(self,cubes):
        
        self.timer+=1
        if self.y>500:
            self.x = self.x_og
            self.y = self.y_og
            self.z = self.z_og
            self.velocity = 0
        if self.mode=="survival":
            self.velocity+=self.gravity
            self.y+=self.velocity
        if self.anglex>360:
            self.anglex-=360
        if self.anglex<0:
            self.anglex+=360
        if self.angley>=89:
            self.angley=89
        if self.angley<=-89:
            self.angley=-89
            
        key = pygame.key.get_pressed()
        if key[pygame.K_w]:
            self.zvelocity+=self.speed*math.cos(PLAYER.anglex*math.pi/180)
            self.xvelocity+=self.speed*math.sin(PLAYER.anglex*math.pi/180)
            
        if key[pygame.K_s]:
            self.zvelocity+=-self.speed*math.cos(PLAYER.anglex*math.pi/180)
            self.xvelocity+=-self.speed*math.sin(PLAYER.anglex*math.pi/180)
        if key[pygame.K_d]:
            self.zvelocity+=self.speed*math.cos((PLAYER.anglex+90)*math.pi/180)
            self.xvelocity+=self.speed*math.sin((PLAYER.anglex+90)*math.pi/180)
        if key[pygame.K_a]:
            self.zvelocity+=self.speed*math.cos((PLAYER.anglex-90)*math.pi/180)
            self.xvelocity+=self.speed*math.sin((PLAYER.anglex-90)*math.pi/180)
        if key[pygame.K_RIGHT]:
            self.anglex+=self.anglespeed
        if key[pygame.K_LEFT]:
            self.anglex-=self.anglespeed
        if key[pygame.K_UP]:
            self.angley-=self.anglespeed
        if key[pygame.K_DOWN]:
            self.angley+=self.anglespeed
        if key[pygame.K_e] and self.timer>self.timerlimit:
            if self.PLACE(cubes):
                self.lightsources = lightup(cubes)
                self.timer = 0
                self.chunkin+=1
        if key[pygame.K_r] and self.timer>self.timerlimit:
            if self.REMOVE(cubes):
                self.lightsources = lightup(cubes)
                self.timer = 0
                self.chunkin+=1
        if key[pygame.K_SPACE] and self.mode == "creative":
            self.y-=self.speed
        if key[pygame.K_LSHIFT]:
            self.y+=self.speed
        self.FOV = self.FOV_OG
        if key[pygame.K_c]:
            self.FOV = self.FOV_OG//5
        
        if key[pygame.K_q]:
            self.velocity = 0
            self.xvelocity = 0
            self.zvelocity = 0
            if self.mode == "creative":
                self.mode = "survival"
                
            else:
                self.mode = "creative"
            pygame.time.delay(100)
            
        if key[pygame.K_1]:
            self.chosenblock=0
        if key[pygame.K_2]:
            self.chosenblock=1
        if key[pygame.K_3]:
            self.chosenblock=2
        if key[pygame.K_4]:
            self.chosenblock=3
        if key[pygame.K_5]:
            self.chosenblock=4
        if key[pygame.K_6]:
            self.chosenblock=5
        if key[pygame.K_7]:
            self.chosenblock=6
        if key[pygame.K_8]:
            self.chosenblock=7
        if key[pygame.K_9]:
            self.chosenblock=8
        self.z+=self.zvelocity
        self.x+=self.xvelocity
        self.SLIDE(0)
        
cubes = []#[(0, 0, 0, 5), (0, 0, 1, 0), (0, 0, 2, 0), (0, 0, 3, 0), (0, 0, 4, 0), (0, 0, 5, 0), (0, 0, 6, 0), (0, 0, 7, 0), (0, 0, 8, 0), (0, 0, 9, 0), (0, 0, 10, 0), (0, 0, 11, 0), (0, 0, 12, 0), (0, 0, 13, 0), (0, 0, 14, 0), (0, 0, 15, 0), (0, 0, 16, 0), (0, 0, 17, 0), (0, 0, 18, 0), (0, 0, 19, 0), (1, 0, 0, 0), (1, 0, 2, 0), (1, 0, 3, 0), (1, 0, 4, 0), (1, 0, 5, 0), (1, 0, 6, 0), (1, 0, 7, 0), (1, 0, 8, 0), (1, 0, 9, 0), (1, 0, 10, 0), (1, 0, 11, 0), (1, 0, 12, 0), (1, 0, 13, 0), (1, 0, 14, 0), (1, 0, 15, 0), (1, 0, 16, 0), (1, 0, 18, 0), (1, 0, 19, 0), (2, 0, 0, 0), (2, 0, 3, 0), (2, 0, 4, 0), (2, 0, 5, 0), (2, 0, 6, 0), (2, 0, 7, 0), (2, 0, 8, 0), (2, 0, 9, 0), (2, 0, 10, 0), (2, 0, 11, 0), (2, 0, 12, 0), (2, 0, 13, 0), (2, 0, 14, 0), (2, 0, 15, 0), (2, 0, 16, 0), (2, 0, 17, 0), (2, 0, 18, 0), (2, 0, 19, 0), (3, 0, 0, 0), (3, 0, 1, 0), (3, 0, 4, 0), (3, 0, 5, 0), (3, 0, 6, 0), (3, 0, 7, 0), (3, 0, 8, 0), (3, 0, 9, 0), (3, 0, 10, 0), (3, 0, 11, 0), (3, 0, 12, 0), (3, 0, 13, 0), (3, 0, 14, 0), (3, 0, 15, 0), (3, 0, 16, 0), (3, 0, 17, 0), (3, 0, 18, 0), (3, 0, 19, 0), (4, 0, 0, 0), (4, 0, 1, 0), (4, 0, 2, 0), (4, 0, 5, 0), (4, 0, 6, 0), (4, 0, 7, 0), (4, 0, 8, 0), (4, 0, 9, 0), (4, 0, 10, 0), (4, 0, 11, 0), (4, 0, 12, 0), (4, 0, 13, 0), (4, 0, 14, 0), (4, 0, 15, 0), (4, 0, 16, 0), (4, 0, 17, 0), (4, 0, 18, 0), (4, 0, 19, 0), (5, 0, 0, 0), (5, 0, 1, 0), (5, 0, 2, 0), (5, 0, 6, 0), (5, 0, 7, 0), (5, 0, 8, 0), (5, 0, 9, 0), (5, 0, 10, 0), (5, 0, 11, 0), (5, 0, 12, 0), (5, 0, 13, 0), (5, 0, 14, 0), (5, 0, 15, 0), (5, 0, 16, 0), (5, 0, 17, 0), (5, 0, 18, 0), (5, 0, 19, 0), (6, 0, 0, 0), (6, 0, 1, 0), (6, 0, 2, 0), (6, 0, 4, 0), (6, 0, 7, 0), (6, 0, 8, 0), (6, 0, 9, 0), (6, 0, 10, 0), (6, 0, 11, 0), (6, 0, 12, 0), (6, 0, 13, 0), (6, 0, 14, 0), (6, 0, 16, 0), (6, 0, 17, 0), (6, 0, 18, 0), (6, 0, 19, 0), (7, 0, 0, 0), (7, 0, 2, 0), (7, 0, 3, 0), (7, 0, 4, 0), (7, 0, 8, 0), (7, 0, 9, 0), (7, 0, 10, 0), (7, 0, 11, 0), (7, 0, 12, 0), (7, 0, 13, 0), (7, 0, 14, 0), (7, 0, 15, 0), (7, 0, 16, 0), (7, 0, 17, 0), (7, 0, 18, 0), (7, 0, 19, 0), (8, 0, 0, 0), (8, 0, 13, 0), (8, 0, 14, 0), (8, 0, 16, 0), (8, 0, 17, 0), (8, 0, 18, 0), (8, 0, 19, 0), (9, 0, 12, 0), (9, 0, 13, 0), (9, 0, 14, 0), (9, 0, 15, 0), (9, 0, 16, 0), (9, 0, 18, 0), (9, 0, 19, 0), (10, 0, 0, 0), (10, 0, 12, 0), (10, 0, 13, 0), (10, 0, 14, 0), (10, 0, 16, 0), (10, 0, 17, 0), (10, 0, 18, 0), (10, 0, 19, 0), (11, 0, 0, 0), (11, 0, 13, 0), (11, 0, 14, 0), (11, 0, 15, 0), (11, 0, 16, 0), (11, 0, 18, 0), (11, 0, 19, 0), (12, 0, 0, 0), (12, 0, 12, 0), (12, 0, 13, 0), (12, 0, 14, 0), (12, 0, 16, 0), (12, 0, 17, 0), (12, 0, 18, 0), (12, 0, 19, 0), (13, 0, 0, 0), (13, 0, 12, 0), (13, 0, 13, 0), (13, 0, 14, 0), (13, 0, 15, 0), (13, 0, 16, 0), (13, 0, 17, 0), (13, 0, 18, 0), (13, 0, 19, 0), (14, 0, 0, 0), (14, 0, 12, 0), (14, 0, 13, 0), (14, 0, 14, 0), (14, 0, 15, 0), (14, 0, 16, 0), (14, 0, 17, 0), (14, 0, 18, 0), (14, 0, 19, 0), (15, 0, 0, 0), (15, 0, 12, 0), (15, 0, 13, 0), (15, 0, 14, 0), (15, 0, 15, 0), (15, 0, 16, 0), (15, 0, 17, 0), (15, 0, 18, 0), (15, 0, 19, 0), (16, 0, 0, 0), (16, 0, 12, 0), (16, 0, 13, 0), (16, 0, 14, 0), (16, 0, 15, 0), (16, 0, 16, 0), (16, 0, 17, 0), (16, 0, 18, 0), (16, 0, 19, 0), (17, 0, 0, 0), (17, 0, 12, 0), (17, 0, 13, 0), (17, 0, 14, 0), (17, 0, 15, 0), (17, 0, 16, 0), (17, 0, 17, 0), (17, 0, 18, 0), (17, 0, 19, 0), (18, 0, 0, 0), (18, 0, 12, 0), (18, 0, 13, 0), (18, 0, 14, 0), (18, 0, 15, 0), (18, 0, 16, 0), (18, 0, 17, 0), (18, 0, 18, 0), (18, 0, 19, 0), (19, 0, 0, 0), (19, 0, 12, 0), (19, 0, 13, 0), (19, 0, 14, 0), (19, 0, 15, 0), (19, 0, 16, 0), (19, 0, 17, 0), (19, 0, 18, 0), (19, 0, 19, 0), (1, 0, 1, 1), (2, 0, 1, 1), (2, 0, 2, 1), (3, 0, 2, 1), (3, 0, 3, 1), (4, 0, 3, 1), (4, 0, 4, 1), (5, 0, 4, 1), (5, 0, 5, 1), (6, 0, 5, 1), (7, 0, 6, 0), (7, 0, 7, 0), (6, 0, 6, 0), (7, -1, 4, 3), (7, -1, 6, 3), (7, -2, 6, 3), (7, -3, 6, 3), (7, -2, 4, 3), (7, -3, 4, 3), (7, -4, 4, 3), (7, -4, 6, 3), (7, -4, 5, 3), (7, -2, 3, 3), (7, -3, 3, 3), (7, -4, 3, 3), (7, -1, 2, 2), (7, -2, 2, 2), (7, -4, 2, 2), (7, -3, 2, 2), (7, -1, 1, 2), (7, -2, 1, 2), (7, -3, 1, 2), (7, -4, 1, 2), (7, -1, 0, 2), (7, -2, 0, 2), (7, -3, 0, 2), (7, -4, 0, 2), (8, -1, 0, 2), (8, -2, 0, 2), (8, -3, 0, 2), (8, -4, 0, 2), (9, 0, 0, 0), (9, -1, 0, 2), (9, -2, 0, 2), (10, -1, 0, 1), (10, -2, 0, 1), (5, 0, 3, 0), (6, 0, 3, 0), (7, -1, 3, 3), (9, -3, 0, 1), (9, -4, 0, 1), (12, -1, 0, 1), (12, -2, 0, 1), (11, -1, 0, 2), (11, -2, 0, 2), (13, -1, 0, 2), (13, -2, 0, 2), (15, -1, 0, 2), (15, -2, 0, 2), (17, -1, 0, 2), (17, -2, 0, 2), (19, -1, 0, 2), (19, -2, 0, 2), (18, -1, 0, 1), (18, -2, 0, 1), (16, -1, 0, 1), (16, -2, 0, 1), (14, -1, 0, 1), (14, -2, 0, 1), (11, -3, 0, 1), (11, -4, 0, 1), (13, -3, 0, 1), (13, -4, 0, 1), (15, -3, 0, 1), (15, -4, 0, 1), (17, -3, 0, 1), (17, -4, 0, 1), (19, -3, 0, 1), (19, -4, 0, 1), (18, -3, 0, 2), (18, -4, 0, 2), (16, -3, 0, 2), (16, -4, 0, 2), (14, -3, 0, 2), (14, -4, 0, 2), (12, -3, 0, 2), (12, -4, 0, 2), (10, -3, 0, 2), (10, -4, 0, 2), (7, -1, 7, 3), (7, -2, 7, 3), (7, -3, 7, 3), (7, -4, 7, 3), (7, -1, 8, 2), (7, -2, 8, 2), (7, -3, 8, 2), (7, -4, 8, 2), (7, -2, 9, 2), (7, -3, 9, 2), (7, -4, 9, 2), (7, -1, 10, 2), (7, -2, 10, 2), (7, -3, 10, 2), (7, -4, 10, 2), (7, -1, 11, 2), (7, -2, 11, 2), (7, -3, 11, 2), (7, -4, 11, 2), (7, -1, 12, 2), (7, -2, 12, 2), (7, -3, 12, 2), (7, -4, 12, 2), (8, 0, 15, 0), (8, -1, 12, 2), (8, -2, 12, 2), (8, -3, 12, 2), (8, -4, 12, 2), (10, -1, 12, 2), (10, -2, 12, 2), (10, -3, 12, 1), (10, -4, 12, 1), (9, -1, 12, 1), (9, -2, 12, 1), (9, -3, 12, 2), (9, -4, 12, 2), (11, 0, 12, 0), (11, -1, 12, 1), (11, -2, 12, 1), (11, -3, 12, 2), (11, -4, 12, 2), (12, -2, 12, 2), (12, -1, 12, 2), (12, -3, 12, 1), (12, -4, 12, 1), (13, -1, 12, 1), (13, -2, 12, 1), (13, -3, 12, 2), (13, -4, 12, 2), (14, -1, 12, 2), (14, -2, 12, 2), (14, -3, 12, 1), (14, -4, 12, 1), (15, -1, 12, 1), (15, -2, 12, 1), (15, -3, 12, 2), (15, -4, 12, 2), (16, -1, 12, 2), (16, -2, 12, 2), (16, -3, 12, 1), (16, -4, 12, 1), (17, -1, 12, 1), (17, -2, 12, 1), (17, -3, 12, 2), (17, -4, 12, 2), (18, -1, 12, 2), (18, -2, 12, 2), (18, -3, 12, 1), (18, -4, 12, 1), (19, -1, 12, 1), (19, -2, 12, 1), (19, -3, 12, 2), (19, -4, 12, 2), (7, -1, 9, 2), (7, 0, 1, 0), (8, 0, 12, 0), (7, 0, 5, 1), (8, 0, 5, 1), (9, 0, 5, 1), (10, 0, 5, 1), (11, 0, 5, 1), (12, 0, 5, 1), (14, 0, 5, 1), (15, 0, 5, 1), (16, 0, 5, 1), (17, 0, 5, 1), (18, 0, 5, 1), (19, 0, 5, 1), (19, 0, 1, 1), (18, 0, 1, 1), (16, 0, 1, 1), (17, 0, 1, 1), (15, 0, 1, 1), (14, 0, 1, 1), (13, 0, 1, 1), (12, 0, 1, 1), (10, 0, 1, 1), (9, 0, 1, 1), (8, 0, 1, 1), (11, 0, 1, 1), (11, 0, 2, 1), (12, 0, 2, 1), (13, 0, 2, 1), (14, 0, 2, 1), (16, 0, 2, 1), (17, 0, 2, 1), (19, 0, 2, 1), (18, 0, 2, 1), (18, 0, 3, 1), (19, 0, 3, 1), (17, 0, 3, 1), (16, 0, 3, 1), (14, 0, 3, 1), (11, 0, 3, 1), (10, 0, 2, 1), (8, 0, 2, 1), (9, 0, 2, 1), (9, 0, 3, 1), (8, 0, 3, 1), (12, 0, 3, 1), (13, 0, 3, 1), (15, 0, 3, 1), (15, 0, 4, 1), (14, 0, 4, 1), (12, 0, 4, 1), (10, 0, 4, 1), (9, 0, 4, 1), (11, 0, 4, 1), (13, 0, 4, 1), (16, 0, 4, 1), (18, 0, 4, 1), (19, 0, 4, 1), (17, 0, 4, 1), (10, 0, 6, 1), (9, 0, 6, 1), (11, 0, 6, 1), (14, 0, 6, 1), (16, 0, 6, 1), (19, 0, 6, 1), (17, 0, 6, 1), (15, 0, 6, 1), (15, 0, 7, 1), (14, 0, 7, 1), (12, 0, 7, 1), (10, 0, 7, 1), (8, 0, 7, 1), (9, 0, 7, 1), (11, 0, 7, 1), (16, 0, 7, 1), (18, 0, 7, 1), (19, 0, 7, 1), (17, 0, 7, 1), (13, 0, 7, 1), (13, 0, 8, 1), (11, 0, 8, 1), (10, 0, 8, 1), (8, 0, 8, 1), (12, 0, 8, 1), (14, 0, 8, 1), (18, 0, 8, 1), (19, 0, 8, 1), (17, 0, 8, 1), (15, 0, 8, 1), (15, 0, 9, 1), (14, 0, 9, 1), (12, 0, 9, 1), (10, 0, 9, 1), (11, 0, 9, 1), (13, 0, 9, 1), (16, 0, 9, 1), (18, 0, 9, 1), (19, 0, 9, 1), (17, 0, 9, 1), (8, 0, 9, 1), (9, 0, 10, 1), (10, 0, 10, 1), (11, 0, 10, 1), (13, 0, 10, 1), (15, 0, 10, 1), (17, 0, 10, 1), (18, 0, 10, 1), (19, 0, 10, 1), (16, 0, 10, 1), (14, 0, 10, 1), (12, 0, 10, 1), (8, 0, 10, 1), (8, 0, 11, 1), (9, 0, 11, 1), (10, 0, 11, 1), (11, 0, 11, 1), (12, 0, 11, 1), (13, 0, 11, 1), (14, 0, 11, 1), (15, 0, 11, 1), (16, 0, 11, 1), (17, 0, 11, 1), (18, 0, 11, 1), (19, 0, 11, 1), (19, -1, 11, 3), (19, -1, 10, 3), (19, -1, 9, 3), (19, -1, 8, 3), (19, -1, 7, 3), (19, -1, 6, 3), (19, -1, 5, 3), (19, -1, 4, 3), (19, -1, 3, 3), (19, -1, 2, 3), (19, -1, 1, 3), (19, -2, 2, 3), (19, -2, 1, 3), (19, -2, 4, 3), (19, -2, 6, 3), (19, -2, 7, 3), (19, -2, 11, 3), (19, -2, 10, 3), (19, -3, 7, 3), (19, -3, 4, 3), (19, -2, 5, 3), (19, -3, 6, 3), (19, -3, 5, 3), (19, -2, 8, 3), (19, -2, 9, 3), (19, -3, 9, 3), (19, -3, 8, 3), (19, -3, 10, 3), (19, -3, 11, 3), (19, -4, 8, 3), (19, -4, 5, 3), (19, -4, 4, 3), (19, -2, 3, 3), (19, -3, 2, 3), (19, -3, 3, 3), (19, -3, 1, 3), (19, -4, 2, 3), (19, -4, 1, 3), (19, -4, 3, 3), (19, -4, 6, 3), (19, -4, 7, 3), (19, -4, 9, 3), (19, -4, 10, 3), (19, -4, 11, 3), (19, -5, 12, 3), (18, -5, 12, 3), (17, -5, 12, 3), (16, -5, 12, 3), (15, -5, 12, 3), (14, -5, 12, 3), (13, -5, 12, 3), (12, -5, 12, 3), (11, -5, 12, 3), (10, -5, 12, 3), (9, -5, 12, 3), (8, -5, 12, 3), (7, -5, 12, 3), (7, -5, 11, 3), (7, -5, 9, 3), (7, -5, 7, 3), (7, -5, 8, 3), (7, -5, 10, 3), (7, -5, 6, 3), (7, -5, 4, 3), (7, -5, 2, 3), (7, -5, 3, 3), (7, -5, 5, 3), (7, -5, 0, 3), (7, -5, 1, 3), (9, -5, 0, 3), (8, -5, 0, 3), (10, -5, 0, 3), (11, -5, 0, 3), (12, -5, 0, 3), (14, -5, 0, 3), (15, -5, 0, 3), (16, -5, 0, 3), (17, -5, 0, 3), (18, -5, 0, 3), (19, -5, 0, 3), (19, -5, 1, 3), (19, -5, 2, 3), (19, -5, 3, 3), (19, -5, 4, 3), (19, -5, 5, 3), (19, -5, 7, 3), (19, -5, 8, 3), (19, -5, 9, 3), (19, -5, 10, 3), (19, -5, 11, 3), (19, -5, 6, 3), (18, -5, 1, 3), (17, -5, 1, 3), (18, -5, 2, 3), (17, -5, 2, 3), (16, -5, 1, 3), (15, -5, 1, 3), (14, -5, 1, 3), (13, -5, 0, 3), (13, -5, 1, 3), (12, -5, 1, 3), (9, -5, 1, 3), (11, -5, 1, 3), (8, -5, 2, 3), (8, -5, 1, 3), (8, -5, 3, 3), (8, -5, 5, 3), (8, -5, 4, 3), (8, -5, 6, 3), (8, -5, 11, 3), (8, -5, 10, 3), (8, -5, 9, 3), (8, -5, 8, 3), (9, -5, 11, 3), (9, -5, 10, 3), (9, -5, 9, 3), (9, -5, 8, 3), (9, -5, 7, 3), (9, -5, 6, 3), (9, -5, 2, 3), (9, -5, 3, 3), (9, -5, 5, 3), (9, -5, 4, 3), (11, -5, 2, 3), (12, -5, 2, 3), (10, -2, 0, 3), (14, -5, 2, 3), (15, -5, 2, 3), (16, -5, 2, 3), (13, -5, 2, 3), (10, -5, 3, 3), (10, -5, 5, 3), (10, -5, 6, 3), (10, -5, 4, 3), (11, -5, 4, 3), (11, -5, 3, 3), (11, -5, 5, 3), (13, 0, 5, 1), (11, -5, 6, 3), (10, -5, 7, 3), (11, -5, 7, 3), (10, -4, 0, 3), (10, -5, 1, 3), (10, -5, 2, 3), (10, -5, 8, 3), (10, -5, 9, 3), (10, -5, 10, 3), (10, -5, 11, 3), (11, -5, 11, 3), (12, -5, 11, 3), (13, -5, 11, 3), (14, -5, 11, 3), (15, -5, 11, 3), (16, -5, 11, 3), (16, -5, 10, 3), (16, -5, 9, 3), (16, -5, 8, 3), (16, -5, 7, 3), (16, -5, 6, 3), (16, -5, 5, 3), (16, -5, 4, 3), (16, -5, 3, 3), (15, -5, 10, 3), (15, -5, 9, 3), (15, -5, 8, 3), (15, -5, 7, 3), (15, -5, 6, 3), (15, -5, 5, 3), (15, -5, 4, 3), (15, -5, 3, 3), (11, -5, 10, 3), (11, -5, 9, 3), (11, -5, 8, 3), (12, -5, 10, 3), (12, -5, 9, 3), (12, -5, 8, 3), (12, -5, 7, 3), (12, -5, 6, 3), (12, -5, 5, 3), (12, -5, 4, 3), (12, -5, 3, 3), (13, -5, 10, 3), (14, -5, 10, 3), (14, -5, 9, 3), (13, -5, 9, 3), (13, -5, 8, 3), (14, -5, 8, 3), (14, -5, 7, 3), (14, -5, 6, 3), (13, -5, 7, 3), (13, -5, 6, 3), (13, -5, 5, 3), (14, -5, 4, 3), (13, -5, 4, 3), (13, -5, 3, 3), (14, -5, 3, 3), (18, -1, 3, 2), (17, -1, 3, 2), (18, -2, 4, 2), (17, -2, 4, 2), (18, -3, 5, 2), (17, -3, 5, 2), (18, -4, 6, 2), (17, -4, 6, 2), (18, -5, 7, 2), (17, -5, 7, 2), (18, -5, 11, 3), (18, -5, 10, 3), (17, -5, 11, 3), (17, -5, 10, 3), (18, -5, 9, 3), (18, -5, 8, 3), (17, -5, 9, 3), (17, -5, 8, 3), (12, -6, 10, 1), (11, -6, 10, 1), (10, -6, 10, 1), (9, -6, 9, 1), (9, -6, 10, 1), (12, -6, 9, 1), (10, -6, 9, 1), (9, -7, 9, 1), (9, -7, 10, 1), (10, -7, 10, 1), (11, -7, 10, 1), (12, -7, 10, 1), (12, -7, 9, 1), (11, -8, 10, 1), (10, -8, 10, 1), (9, -6, 4, 1), (10, -6, 4, 1), (11, -6, 4, 1), (11, -6, 3, 1), (12, -6, 4, 1), (12, -6, 3, 1), (10, -6, 3, 1), (9, -6, 3, 1), (9, -7, 3, 1), (10, -7, 3, 1), (11, -7, 3, 1), (12, -7, 3, 1), (11, -8, 3, 1), (10, -8, 3, 1), (9, -7, 4, 1), (12, -7, 4, 1), (12, -1, 9, 2), (13, -1, 8, 2), (11, -1, 8, 2), (11, -2, 8, 2), (13, -2, 8, 2), (12, -1, 8, 2), (12, -2, 9, 2), (12, -3, 9, 2), (13, -1, 9, 2), (11, -1, 9, 2), (11, -2, 9, 2), (13, -2, 9, 2), (12, 0, 6, 1), (12, -1, 6, 3), (13, 0, 6, 1), (13, -1, 6, 3), (13, -1, 5, 3), (12, -1, 5, 3), (11, -1, 5, 3), (11, -1, 6, 3), (12, -1, 3, 2), (13, -1, 3, 2), (11, -1, 3, 2), (12, -1, 2, 2), (13, -1, 2, 2), (11, -1, 2, 2), (13, -2, 3, 2), (11, -2, 3, 2), (11, -2, 2, 2), (13, -2, 2, 2), (12, -2, 2, 2), (12, -3, 2, 2), (3, -1, 15, 3), (3, -2, 15, 3), (3, -3, 15, 3), (3, -4, 15, 3), (2, -4, 15, 4), (3, -4, 14, 4), (3, -4, 16, 4), (3, -5, 15, 4), (4, -5, 15, 4), (3, -5, 16, 4), (4, -4, 16, 4), (2, -5, 16, 4), (2, -4, 14, 4), (2, -4, 16, 4), (2, -5, 15, 4), (3, -5, 14, 4), (4, -4, 15, 4), (4, -4, 14, 4), (14, -1, 16, 3), (14, -2, 16, 3), (14, -3, 16, 3), (14, -4, 16, 3), (14, -5, 16, 4), (14, -5, 17, 4), (15, -5, 16, 4), (15, -5, 17, 4), (13, -5, 16, 4), (13, -5, 17, 4), (14, -5, 15, 4), (13, -5, 15, 4), (15, -5, 15, 4), (15, -6, 16, 4), (14, -6, 16, 4), (14, -6, 15, 4), (13, -6, 16, 4), (14, -6, 17, 4), (1, -1, 9, 3), (1, -2, 9, 3), (1, -3, 9, 3), (1, -4, 9, 3), (1, -5, 9, 4), (2, -5, 9, 4), (1, -5, 8, 4), (2, -5, 8, 4), (0, -5, 9, 4), (1, -5, 10, 4), (0, -5, 10, 4), (1, -6, 9, 4), (0, -6, 9, 4), (0, -6, 10, 4), (1, -6, 8, 4), (0, -5, 8, 4), (2, -5, 10, 4), (11, -6, 9, 1), (10, -6, 7, 4), (10, -6, 6, 4), (11, -6, 7, 4), (11, -6, 6, 4), (-1, 0, 1, 0), (-1, 0, 0, 0), (-2, 0, 0, 0), (-3, 0, 0, 0), (-4, 0, 0, 0), (-5, 0, 0, 0), (-6, 0, 0, 0), (-7, 0, 0, 0), (-8, 0, 0, 0), (-10, 0, 0, 0), (-2, 0, 1, 0), (-3, 0, 1, 0), (-4, 0, 1, 0), (-5, 0, 1, 0), (-6, 0, 1, 0), (-7, 0, 1, 0), (-8, 0, 1, 0), (-9, 0, 1, 0), (-10, 0, 1, 0), (1, 0, -1, 0), (1, 0, -2, 0), (0, 0, -2, 0), (0, 0, -1, 0), (-1, 0, -1, 0), (-1, 0, -2, 0), (-2, 0, -2, 0), (-2, 0, -1, 0), (-3, 0, -2, 0), (-3, 0, -1, 0), (-4, 0, -2, 0), (-4, 0, -1, 0), (-5, 0, -1, 0), (-5, 0, -2, 0), (-6, 0, -1, 0), (-6, 0, -2, 0), (-7, 0, -1, 0), (-7, 0, -2, 0), (-8, 0, -1, 0), (-8, 0, -2, 0), (-9, 0, -2, 0), (-10, 0, -2, 0), (-10, 0, -1, 0), (-1, 0, 2, 0), (-1, 0, 3, 0), (-1, 0, 4, 0), (-2, 0, 4, 0), (-2, 0, 3, 0), (-2, 0, 2, 0), (-3, 0, 2, 0), (-6, 0, 2, 0), (-5, 0, 2, 0), (-3, 0, 3, 0), (-3, 0, 4, 0), (-4, 0, 4, 0), (-4, 0, 3, 0), (-5, 0, 3, 0), (-6, 0, 3, 0), (-5, 0, 4, 0), (-6, 0, 4, 0), (-7, 0, 4, 0), (-7, 0, 2, 0), (-7, 0, 3, 0), (-8, 0, 2, 0), (-8, 0, 3, 0), (-9, 0, 3, 0), (-9, 0, 2, 0), (-8, 0, 4, 0), (-9, 0, 4, 0), (-10, 0, 4, 0), (-10, 0, 2, 0), (-11, 0, 1, 0), (-11, 0, 0, 0), (-11, 0, -1, 0), (-12, 0, -1, 0), (-12, 0, 0, 0), (-16, 0, 2, 0), (-16, 0, -2, 0), (-17, 0, -2, 0), (-18, 0, -2, 0), (-18, 0, -1, 0), (-18, 0, 0, 0), (-18, 0, 1, 0), (-18, 0, 2, 0), (-17, 0, -3, 0), (-17, 0, -4, 0), (-17, 0, -5, 0), (-18, 0, -5, 0), (-18, 0, -6, 0), (-17, 0, -7, 0), (-18, 0, -7, 0), (-16, 0, -5, 0), (-1, 0, 5, 0), (-2, 0, 5, 0), (-4, 0, 5, 0), (-5, 0, 5, 0), (-6, 0, 5, 0), (-7, 0, 5, 0), (-8, 0, 5, 0), (-9, 0, 5, 0), (-10, 0, 5, 0), (-1, 0, 6, 0), (-2, 0, 6, 0), (-3, 0, 6, 0), (-4, 0, 6, 0), (-5, 0, 6, 0), (-6, 0, 6, 0), (-7, 0, 6, 0), (-8, 0, 6, 0), (-9, 0, 6, 0), (-10, 0, 6, 0), (-1, 0, 7, 0), (-2, 0, 7, 0), (-3, 0, 7, 0), (-4, 0, 7, 0), (-5, 0, 7, 0), (-6, 0, 7, 0), (-7, 0, 7, 0), (-8, 0, 7, 0), (-9, 0, 7, 0), (-10, 0, 7, 0), (-1, 0, 8, 0), (-2, 0, 8, 0), (-3, 0, 8, 0), (-4, 0, 8, 0), (-5, 0, 8, 0), (-6, 0, 8, 0), (-7, 0, 8, 0), (-8, 0, 8, 0), (-9, 0, 8, 0), (-10, 0, 8, 0), (-1, 0, 9, 0), (-2, 0, 9, 0), (-3, 0, 9, 0), (-4, 0, 9, 0), (-5, 0, 9, 0), (-6, 0, 9, 0), (-7, 0, 9, 0), (-8, 0, 9, 0), (-9, 0, 9, 0), (-10, 0, 9, 0), (-2, 0, 12, 0), (-1, 0, 10, 0), (-2, 0, 10, 0), (-3, 0, 10, 0), (-3, 0, 12, 0), (-4, 0, 12, 0), (-5, 0, 12, 0), (-6, 0, 12, 0), (-7, 0, 12, 0), (-8, 0, 12, 0), (-9, 0, 12, 0), (-10, 0, 12, 0), (-1, 0, 11, 0), (-2, 0, 11, 0), (-3, 0, 11, 0), (-4, 0, 11, 0), (-5, 0, 11, 0), (-6, 0, 11, 0), (-7, 0, 11, 0), (-8, 0, 11, 0), (-9, 0, 11, 0), (-10, 0, 11, 0), (-4, 0, 10, 0), (-5, 0, 10, 0), (-6, 0, 10, 0), (-7, 0, 10, 0), (-8, 0, 10, 0), (-9, 0, 10, 0), (-10, 0, 10, 0), (-1, 0, 14, 0), (-2, 0, 14, 0), (-3, 0, 14, 0), (-4, 0, 14, 0), (-5, 0, 14, 0), (-6, 0, 14, 0), (-7, 0, 14, 0), (-8, 0, 14, 0), (-9, 0, 14, 0), (-10, 0, 14, 0), (-1, 0, 13, 0), (-2, 0, 13, 0), (-3, 0, 13, 0), (-4, 0, 13, 0), (-5, 0, 13, 0), (-6, 0, 13, 0), (-7, 0, 13, 0), (-8, 0, 13, 0), (-9, 0, 13, 0), (-10, 0, 13, 0), (-1, 0, 15, 0), (-2, 0, 15, 0), (-3, 0, 15, 0), (-4, 0, 15, 0), (-5, 0, 15, 0), (-6, 0, 15, 0), (-7, 0, 15, 0), (-8, 0, 15, 0), (-9, 0, 15, 0), (-10, 0, 15, 0), (-2, 0, 16, 0), (-3, 0, 16, 0), (-4, 0, 16, 0), (-5, 0, 16, 0), (-6, 0, 16, 0), (-7, 0, 16, 0), (-8, 0, 16, 0), (-9, 0, 16, 0), (-10, 0, 16, 0), (-1, 0, 17, 0), (-2, 0, 17, 0), (-3, 0, 17, 0), (-4, 0, 17, 0), (-5, 0, 17, 0), (-6, 0, 17, 0), (-7, 0, 17, 0), (-8, 0, 17, 0), (-9, 0, 17, 0), (-10, 0, 17, 0), (-1, 0, 18, 0), (-2, 0, 18, 0), (-3, 0, 18, 0), (-4, 0, 18, 0), (-5, 0, 18, 0), (-6, 0, 18, 0), (-7, 0, 18, 0), (-8, 0, 18, 0), (-9, 0, 18, 0), (-10, 0, 18, 0), (-1, 0, 19, 0), (-2, 0, 19, 0), (-3, 0, 19, 0), (-4, 0, 19, 0), (-5, 0, 19, 0), (-6, 0, 19, 0), (-7, 0, 19, 0), (-8, 0, 19, 0), (-9, 0, 19, 0), (-10, 0, 19, 0), (-11, 0, 3, 0), (-12, 0, 3, 0), (-13, 0, 3, 0), (-15, 0, 3, 0), (-16, 0, 3, 0), (-13, 0, 4, 0), (-14, 0, 3, 0), (-11, 0, 4, 0), (-12, 0, 4, 0), (-17, 0, 3, 0), (-18, 0, 3, 0), (-14, 0, 4, 0), (-15, 0, 4, 0), (-16, 0, 4, 0), (-17, 0, 4, 0), (-18, 0, 4, 0), (-11, 0, 5, 0), (-12, 0, 5, 0), (-13, 0, 5, 0), (-14, 0, 5, 0), (-15, 0, 5, 0), (-16, 0, 5, 0), (-17, 0, 5, 0), (-18, 0, 5, 0), (-11, 0, 6, 0), (-12, 0, 6, 0), (-13, 0, 6, 0), (-14, 0, 6, 0), (-15, 0, 6, 0), (-16, 0, 6, 0), (-17, 0, 6, 0), (-18, 0, 6, 0), (-11, 0, 7, 0), (-12, 0, 7, 0), (-13, 0, 7, 0), (-14, 0, 7, 0), (-14, 0, 8, 0), (-15, 0, 8, 0), (-17, 0, 8, 0), (-18, 0, 8, 0), (-15, 0, 7, 0), (-16, 0, 7, 0), (-17, 0, 7, 0), (-18, 0, 7, 0), (-11, 0, 8, 0), (-12, 0, 8, 0), (-13, 0, 8, 0), (-11, 0, 9, 0), (-12, 0, 9, 0), (-13, 0, 9, 0), (-14, 0, 9, 0), (-15, 0, 9, 0), (-16, 0, 9, 0), (-17, 0, 9, 0), (-18, 0, 9, 0), (-11, 0, 10, 0), (-12, 0, 10, 0), (-13, 0, 10, 0), (-14, 0, 10, 0), (-15, 0, 10, 0), (-16, 0, 10, 0), (-17, 0, 10, 0), (-18, 0, 10, 0), (-11, 0, 11, 0), (-12, 0, 11, 0), (-13, 0, 11, 0), (-14, 0, 11, 0), (-15, 0, 11, 0), (-16, 0, 11, 0), (-17, 0, 11, 0), (-18, 0, 11, 0), (-11, 0, 12, 0), (-12, 0, 12, 0), (-13, 0, 12, 0), (-14, 0, 12, 0), (-15, 0, 12, 0), (-16, 0, 12, 0), (-17, 0, 12, 0), (-18, 0, 12, 0), (-11, 0, 13, 0), (-12, 0, 13, 0), (-13, 0, 13, 0), (-14, 0, 13, 0), (-15, 0, 13, 0), (-16, 0, 13, 0), (-17, 0, 13, 0), (-18, 0, 13, 0), (-11, 0, 14, 0), (-12, 0, 14, 0), (-13, 0, 14, 0), (-14, 0, 14, 0), (-15, 0, 14, 0), (-16, 0, 14, 0), (-17, 0, 14, 0), (-18, 0, 14, 0), (-11, 0, 15, 0), (-12, 0, 15, 0), (-13, 0, 15, 0), (-14, 0, 15, 0), (-15, 0, 15, 0), (-16, 0, 15, 0), (-17, 0, 15, 0), (-18, 0, 15, 0), (-11, 0, 16, 0), (-12, 0, 16, 0), (-13, 0, 16, 0), (-14, 0, 16, 0), (-15, 0, 16, 0), (-16, 0, 16, 0), (-17, 0, 16, 0), (-18, 0, 16, 0), (-11, 0, 17, 0), (-12, 0, 17, 0), (-13, 0, 17, 0), (-14, 0, 17, 0), (-15, 0, 17, 0), (-16, 0, 17, 0), (-17, 0, 17, 0), (-18, 0, 17, 0), (-11, 0, 18, 0), (-12, 0, 18, 0), (-13, 0, 18, 0), (-14, 0, 18, 0), (-15, 0, 18, 0), (-16, 0, 18, 0), (-17, 0, 18, 0), (-18, 0, 18, 0), (-11, 0, 19, 0), (-12, 0, 19, 0), (-13, 0, 19, 0), (-14, 0, 19, 0), (-15, 0, 19, 0), (-16, 0, 19, 0), (-17, 0, 19, 0), (-18, 0, 19, 0), (-5, -1, 6, 2), (-6, -1, 6, 2), (-7, -1, 6, 2), (-8, -1, 6, 2), (-9, -1, 6, 2), (-10, -1, 6, 2), (-11, -1, 6, 2), (-12, -1, 6, 2), (-13, -1, 6, 2), (-14, -1, 6, 2), (-15, -1, 6, 2), (-16, -1, 6, 2), (-17, -1, 6, 2), (-17, -1, 7, 2), (-17, -1, 8, 2), (-17, -1, 9, 2), (-17, -1, 10, 2), (-17, -1, 11, 2), (-17, -1, 12, 2), (-17, -1, 13, 2), (-17, -1, 14, 2), (-17, -1, 15, 2), (-17, -1, 16, 2), (-17, -1, 17, 2), (-17, -1, 18, 2), (-16, -1, 18, 2), (-15, -1, 18, 2), (-14, -1, 18, 2), (-13, -1, 18, 2), (-12, -1, 18, 2), (-11, -1, 18, 2), (-10, -1, 18, 2), (-9, -1, 18, 2), (-8, -1, 18, 2), (-6, -1, 18, 2), (-5, -1, 7, 2), (-5, -1, 8, 2), (-5, -1, 9, 2), (-5, -1, 17, 2), (-5, -1, 18, 2), (-5, -1, 16, 2), (-5, -2, 9, 2), (-5, -2, 7, 2), (-6, -2, 6, 2), (-8, -2, 6, 2), (-10, -2, 6, 2), (-12, -2, 6, 2), (-14, -2, 6, 2), (-16, -2, 6, 2), (-17, -2, 7, 2), (-17, -2, 9, 2), (-17, -2, 11, 2), (-17, -2, 17, 2), (-17, -2, 15, 2), (-17, -2, 13, 2), (-16, -2, 18, 2), (-6, -2, 18, 2), (-8, -2, 18, 2), (-10, -2, 18, 2), (-12, -2, 18, 2), (-14, -2, 18, 2), (-5, -2, 17, 2), (-5, -1, 15, 2), (-5, -2, 15, 2), (-5, -2, 14, 1), (-5, -1, 14, 1), (-5, -2, 10, 1), (-13, -2, 11, 1), (-13, -2, 10, 1), (-13, -2, 9, 1), (-13, -1, 11, 1), (-13, -1, 9, 1), (-12, -1, 10, 3), (-11, -1, 10, 3), (-11, -2, 10, 3), (-13, -1, 10, 1), (-14, -1, 10, 3), (-15, -1, 10, 3), (-15, -2, 10, 3), (-12, -1, 11, 3), (-11, -1, 11, 3), (-11, -2, 11, 3), (-12, -1, 9, 3), (-11, -1, 9, 3), (-11, -2, 9, 3), (-14, -1, 11, 3), (-15, -1, 11, 3), (-15, -2, 11, 3), (-14, -1, 9, 3), (-15, -1, 9, 3), (-15, -2, 9, 3), (-7, -1, 18, 2), (-13, -2, 15, 3), (-13, -3, 15, 3), (-13, -4, 15, 4), (-12, -4, 15, 4), (-13, -4, 14, 4), (-13, -4, 16, 4), (-14, -4, 16, 4), (-14, -4, 14, 4), (-14, -4, 15, 4), (-12, -4, 16, 4), (-12, -4, 14, 4), (-13, -5, 15, 4), (-13, -5, 14, 4), (-12, -5, 15, 4), (-13, -5, 16, 4), (-14, -5, 15, 4), (-9, -1, 16, 3), (-8, -1, 16, 3), (-7, -1, 15, 3), (-7, -1, 14, 3), (-9, -1, 13, 3), (-8, -1, 13, 3), (-10, -1, 15, 3), (-10, -1, 14, 3), (-9, -1, 15, 1), (-9, -2, 15, 1), (-8, -1, 15, 1), (-9, -1, 14, 1), (-8, -1, 14, 1), (-8, -2, 14, 1), (-9, -2, 14, 1), (-8, -2, 15, 1), (-10, -1, 13, 1), (-7, -1, 16, 1), (-7, -1, 13, 1), (-9, -3, 15, 1), (-8, -4, 15, 1), (-8, -5, 14, 1), (-9, -6, 14, 1), (-10, -6, 14, 1), (-10, -6, 15, 1), (-12, -6, 15, 1), (-11, -6, 15, 1), (-14, -5, 14, 3), (-14, -6, 14, 3), (-14, -6, 15, 3), (-14, -5, 16, 3), (-14, -6, 16, 3), (-13, -6, 14, 3), (-12, -5, 14, 3), (-12, -6, 14, 3), (-12, -5, 16, 3), (-12, -6, 16, 3), (-13, -6, 16, 3), (-13, -6, 15, 3), (-14, -7, 14, 3), (-14, -8, 14, 3), (-14, -9, 14, 3), (-14, -7, 16, 3), (-14, -8, 16, 3), (-14, -9, 16, 3), (-12, -7, 16, 3), (-12, -8, 16, 3), (-12, -9, 16, 3), (-12, -7, 14, 3), (-12, -8, 14, 3), (-12, -9, 14, 3), (-12, -9, 15, 3), (-14, -9, 15, 3), (-13, -9, 16, 3), (-13, -9, 15, 3), (-11, -6, 14, 1), (-13, -1, 15, 3), (-11, -6, 16, 1), (-10, -6, 16, 1), (8, 0, 6, 5), (9, 0, 9, 5), (9, 0, 8, 1), (8, 0, 4, 5), (10, 0, 3, 5), (16, 0, 8, 5), (18, 0, 6, 5), (15, 0, 2, 5), (14, -5, 5, 5), (8, -5, 7, 5), (-16, 0, 8, 5), (-10, -1, 16, 5), (6, 0, 15, 5), (10, 0, 15, 5), (-1, 0, 16, 5), (-1, 0, 12, 5), (-3, 0, 5, 5), (-9, 0, -1, 5), (-12, 0, 1, 5), (-16, 0, 1, 5), (-12, 0, -3, 5), (-11, 0, -3, 0), (-10, 0, -3, 0), (-9, 0, -3, 0), (-8, 0, -3, 0), (-6, 0, -3, 0), (-5, 0, -3, 0), (-4, 0, -3, 5), (-7, 0, -3, 5), (2, 0, -1, 0), (2, 0, -2, 0), (3, 0, -1, 0), (3, 0, -2, 0), (5, 0, -1, 0), (4, 0, -1, 0), (4, 0, -2, 0), (5, 0, -2, 0), (6, 0, -1, 0), (7, 0, -1, 0), (8, 0, -1, 0), (9, 0, -1, 0), (10, 0, -1, 0), (11, 0, -1, 0), (12, 0, -1, 0), (13, 0, -1, 0), (14, 0, -1, 0), (15, 0, -1, 0), (16, 0, -1, 0), (17, 0, -1, 0), (18, 0, -1, 0), (19, 0, -1, 0), (18, 0, -2, 0), (17, 0, -2, 0), (16, 0, -2, 0), (15, 0, -2, 0), (14, 0, -2, 0), (13, 0, -2, 0), (12, 0, -2, 0), (11, 0, -2, 0), (10, 0, -2, 0), (9, 0, -2, 0), (8, 0, -2, 0), (7, 0, -2, 0), (6, 0, -2, 0), (5, 0, -3, 0), (6, 0, -3, 0), (7, 0, -3, 0), (8, 0, -3, 0), (9, 0, -3, 0), (10, 0, -3, 0), (11, 0, -3, 0), (12, 0, -3, 0), (13, 0, -3, 0), (14, 0, -3, 0), (15, 0, -3, 0), (16, 0, -3, 0), (17, 0, -3, 0), (18, 0, -3, 0), (19, 0, -2, 0), (19, 0, -3, 0), (18, 0, -4, 0), (17, 0, -4, 0), (16, 0, -4, 0), (15, 0, -4, 0), (14, 0, -4, 0), (13, 0, -4, 0), (12, 0, -4, 0), (11, 0, -4, 0), (9, 0, -4, 0), (8, 0, -4, 0), (7, 0, -4, 0), (6, 0, -4, 0), (5, 0, -4, 0), (4, 0, -3, 0), (3, 0, -3, 0), (2, 0, -3, 0), (1, 0, -3, 0), (0, 0, -3, 0), (-1, 0, -3, 0), (-2, 0, -3, 0), (-3, 0, -3, 0), (-4, 0, -4, 0), (-3, 0, -4, 0), (-3, 0, -5, 0), (-2, 0, -4, 0), (-1, 0, -4, 0), (0, 0, -4, 0), (1, 0, -4, 0), (2, 0, -4, 0), (3, 0, -4, 0), (4, 0, -4, 0), (5, 0, -5, 0), (6, 0, -5, 0), (7, 0, -5, 0), (8, 0, -5, 0), (9, 0, -5, 0), (10, 0, -5, 0), (11, 0, -5, 0), (12, 0, -5, 0), (13, 0, -5, 0), (14, 0, -5, 0), (15, 0, -5, 0), (16, 0, -5, 0), (17, 0, -5, 0), (18, 0, -5, 0), (19, 0, -4, 0), (19, 0, -5, 0), (19, 0, -6, 0), (18, 0, -6, 0), (17, 0, -6, 0), (16, 0, -6, 0), (15, 0, -6, 0), (14, 0, -6, 0), (13, 0, -6, 0), (12, 0, -6, 0), (11, 0, -6, 0), (10, 0, -6, 0), (9, 0, -6, 0), (8, 0, -6, 0), (7, 0, -6, 0), (6, 0, -6, 0), (5, 0, -6, 0), (4, 0, -5, 0), (3, 0, -5, 0), (3, 0, -6, 0), (2, 0, -5, 0), (1, 0, -5, 0), (0, 0, -5, 0), (-1, 0, -5, 0), (-2, 0, -5, 0), (-1, 0, -6, 0), (0, 0, -6, 0), (1, 0, -6, 0), (2, 0, -6, 0), (-2, 0, -6, 0), (-3, 0, -6, 0), (-4, 0, -5, 0), (-5, 0, -4, 0), (-6, 0, -4, 0), (-7, 0, -4, 0), (-8, 0, -4, 0), (-9, 0, -4, 0), (-10, 0, -4, 0), (-11, 0, -4, 0), (-12, 0, -4, 0), (-13, 0, -4, 0), (-14, 0, -4, 0), (-13, 0, -5, 0), (-12, 0, -5, 0), (-11, 0, -5, 0), (-10, 0, -5, 0), (-9, 0, -5, 0), (-8, 0, -5, 0), (-7, 0, -5, 0), (-6, 0, -5, 0), (-5, 0, -5, 0), (-5, 0, -6, 0), (-4, 0, -6, 0), (-6, 0, -6, 0), (-6, 0, -7, 0), (-4, 0, -7, 0), (-3, 0, -7, 0), (-2, 0, -7, 0), (0, 0, -7, 0), (1, 0, -7, 0), (2, 0, -7, 0), (3, 0, -7, 0), (4, 0, -7, 0), (4, 0, -8, 0), (1, 0, -8, 0), (0, 0, -8, 0), (-1, 0, -8, 0), (-2, 0, -8, 0), (-3, 0, -8, 0), (-4, 0, -8, 0), (-5, 0, -8, 0), (-6, 0, -8, 0), (-7, 0, -6, 0), (-7, 0, -7, 0), (-7, 0, -8, 0), (-8, 0, -6, 0), (-9, 0, -6, 0), (-9, 0, -7, 0), (-9, 0, -8, 0), (-10, 0, -7, 0), (-10, 0, -8, 0), (-11, 0, -6, 0), (-11, 0, -7, 0), (-12, 0, -6, 0), (-11, 0, -8, 0), (-12, 0, -7, 0), (-12, 0, -8, 0), (-13, 0, -6, 0), (-13, 0, -7, 0), (-14, 0, -5, 0), (-14, 0, -6, 0), (-14, 0, -7, 0), (-14, 0, -8, 0), (-13, 0, -8, 0), (-8, 0, -7, 0), (-8, 0, -8, 0), (2, 0, -8, 0), (3, 0, -8, 0), (5, 0, -7, 0), (5, 0, -8, 0), (6, 0, -7, 0), (6, 0, -8, 0), (7, 0, -7, 0), (8, 0, -7, 0), (9, 0, -7, 0), (10, 0, -7, 0), (11, 0, -7, 0), (12, 0, -7, 0), (13, 0, -7, 0), (14, 0, -7, 0), (15, 0, -7, 0), (16, 0, -7, 0), (17, 0, -7, 0), (18, 0, -8, 0), (17, 0, -8, 0), (16, 0, -8, 0), (15, 0, -8, 0), (14, 0, -8, 0), (13, 0, -8, 0), (12, 0, -8, 0), (11, 0, -8, 0), (10, 0, -8, 0), (9, 0, -8, 0), (8, 0, -8, 0), (7, 0, -8, 0), (19, 0, -7, 0), (19, 0, -8, 0), (14, -1, -4, 3), (14, -2, -4, 3), (14, -3, -4, 3), (14, -4, -4, 4), (13, -4, -4, 4), (14, -4, -5, 4), (15, -4, -4, 4), (14, -4, -3, 4), (13, -4, -3, 4), (15, -4, -3, 4), (15, -4, -5, 4), (13, -4, -5, 4), (13, -5, -4, 4), (14, -5, -4, 4), (14, -5, -5, 4), (15, -5, -4, 4), (14, -5, -3, 4), (4, 0, -6, 5), (10, 0, -4, 5), (18, 0, -7, 5), (-14, 0, -3, 0), (-13, 0, -3, 0), (-10, 0, -6, 5), (-9, 0, 0, 0), (-10, 0, 3, 0), (-11, 0, 2, 0), (-12, 0, 2, 0), (-13, 0, 2, 0), (-14, 0, 2, 0), (-15, 0, 2, 0), (-15, 0, 1, 0), (-13, 0, 1, 0), (-16, 0, -4, 0), (-15, 0, -5, 0), (-15, 0, -4, 0), (-15, 0, -3, 0), (-15, 0, -8, 0), (-15, 0, -7, 0), (-15, 0, -6, 0), (-18, 0, -4, 0), (-18, 0, -3, 0), (-16, 0, -6, 0), (-17, 0, -6, 0), (-17, 0, -8, 0), (-18, 0, -8, 0), (-16, 0, -8, 0), (-12, 0, -2, 0), (-11, 0, -2, 0), (-14, 0, 1, 0), (-14, 0, 0, 0), (-14, 0, -1, 0), (-14, 0, -2, 0), (-13, 0, -2, 0), (-13, 0, -1, 0), (-13, 0, 0, 0), (-15, 0, 0, 0), (-15, 0, -1, 0), (-15, 0, -2, 0), (-16, 0, 0, 0), (-16, 0, -1, 0), (-17, 0, 1, 0), (-17, 0, 0, 0), (-17, 0, -1, 0), (1, 0, 17, 0), (-1, 0, -7, 5), (-5, 0, -7, 5), (-16, 0, -7, 5), (-16, 0, -3, 5), (-4, -1, -5, 3), (-4, -2, -5, 3), (-4, -3, -5, 3), (-4, -1, -2, 3), (-4, -2, -2, 3), (-4, -3, -2, 3), (-4, -3, -4, 3), (-4, -3, -3, 3), (-4, -1, -6, 1), (-4, -3, -6, 1), (-4, -1, -7, 1), (-4, -3, -7, 1), (-4, -1, -8, 1), (-4, -3, -8, 1), (-5, -3, -8, 1), (-5, -1, -8, 1), (-6, -1, -8, 1), (-7, -1, -8, 1), (-8, -1, -8, 1), (-9, -1, -8, 1), (-10, -1, -8, 1), (-11, -1, -8, 1), (-12, -1, -8, 1), (-13, -1, -8, 1), (-14, -1, -8, 1), (-15, -1, -8, 1), (-16, -1, -8, 1), (-17, -1, -8, 1), (-18, -1, -8, 1), (-18, -1, -7, 1), (-18, -1, -6, 1), (-18, -1, -5, 1), (-18, -1, -4, 1), (-18, -1, -3, 1), (-18, -1, -2, 1), (-18, -1, -1, 1), (-18, -1, 0, 1), (-18, -1, 1, 1), (-18, -1, 2, 1), (-18, -1, 3, 1), (-16, -1, 3, 1), (-14, -1, 3, 1), (-12, -1, 3, 1), (-10, -1, 3, 1), (-8, -1, 3, 1), (-6, -1, 3, 1), (-4, -1, 3, 1), (-17, 0, 2, 0), (-5, -1, 3, 1), (-7, -1, 3, 1), (-9, -1, 3, 1), (-11, -1, 3, 1), (-13, -1, 3, 1), (-15, -1, 3, 1), (-17, -1, 3, 1), (-4, -1, -1, 1), (-4, -3, -1, 1), (-4, -1, 0, 1), (-4, -3, 0, 1), (-4, -1, 1, 1), (-4, -3, 1, 1), (-4, 0, 2, 0), (-4, -1, 2, 1), (-4, -3, 2, 1), (-6, -3, -8, 1), (-7, -3, -8, 1), (-8, -3, -8, 1), (-9, -3, -8, 1), (-10, -3, -8, 1), (-11, -3, -8, 1), (-12, -3, -8, 1), (-13, -3, -8, 1), (-14, -3, -8, 1), (-15, -3, -8, 1), (-16, -3, -8, 1), (-17, -3, -8, 1), (-18, -3, -8, 1), (-18, -3, -7, 1), (-18, -3, -6, 1), (-18, -3, -5, 1), (-18, -3, -4, 1), (-18, -3, -3, 1), (-18, -3, -2, 1), (-18, -3, -1, 1), (-18, -3, 0, 1), (-18, -3, 1, 1), (-18, -3, 2, 1), (-18, -3, 3, 1), (-17, -3, 3, 1), (-16, -3, 3, 1), (-15, -3, 3, 1), (-14, -3, 3, 1), (-13, -3, 3, 1), (-12, -3, 3, 1), (-11, -3, 3, 1), (-10, -3, 3, 1), (-9, -3, 3, 1), (-8, -3, 3, 1), (-7, -3, 3, 1), (-6, -3, 3, 1), (-5, -3, 3, 1), (-4, -3, 3, 1), (-13, -1, -1, 3), (-13, -2, -1, 3), (-13, -3, -1, 3), (-11, -1, -5, 3), (-11, -2, -5, 3), (-11, -3, -5, 3), (-11, -4, -5, 3), (-11, -5, -5, 3), (-15, -1, -5, 3), (-15, -2, -5, 3), (-15, -3, -5, 3), (-15, -4, -5, 3), (-8, -1, 0, 3), (-8, -2, 0, 3), (-8, -3, 0, 3), (-8, -4, 0, 3), (-8, -5, 0, 3), (-13, -4, -1, 4), (-12, -4, -1, 4), (-13, -4, 0, 4), (-12, -4, 0, 4), (-14, -4, -1, 4), (-14, -4, 0, 4), (-13, -4, -2, 4), (-14, -4, -2, 4), (-12, -4, -2, 4), (-12, -5, -1, 4), (-12, -5, -2, 4), (-13, -5, -2, 4), (-13, -5, -1, 4), (-13, -5, 0, 4), (-11, -6, -5, 4), (-11, -6, -6, 4), (-10, -6, -5, 4), (-10, -6, -6, 4), (-11, -6, -4, 4), (-10, -6, -4, 4), (-11, -6, -3, 4), (-12, -6, -5, 4), (-12, -6, -4, 4), (-12, -6, -6, 4), (-10, -7, -5, 4), (-11, -7, -5, 4), (-11, -7, -4, 4), (-12, -7, -4, 4), (-12, -7, -6, 4), (-11, -7, -6, 4), (-11, -6, -7, 4), (-8, -6, 0, 4), (-8, -7, 0, 4), (-7, -6, 0, 4), (-7, -7, 0, 4), (-8, -6, 1, 4), (-8, -7, 1, 4), (-9, -6, 0, 4), (-9, -7, 0, 4), (-8, -6, -1, 4), (-8, -7, -1, 4), (-9, -6, -1, 4), (-9, -6, 1, 4), (-7, -6, 1, 4), (-7, -6, -1, 4), (-15, -5, -5, 4), (-16, -5, -5, 4), (-16, -6, -5, 4), (-15, -6, -5, 4), (-15, -5, -4, 4), (-14, -5, -5, 4), (-14, -5, -4, 4), (-15, -5, -6, 4), (-16, -5, -6, 4), (-14, -5, -6, 4), (-5, -1, 10, 1), (-13, -9, 14, 3), (12, 0, 15, 0), (11, 0, 17, 0), (9, 0, 17, 0)]


cubes3 = []
hashmap = []
chunkmap = []
chunkmap2 = []




    





def Hash(tupp):
    
    tup = (tupp[0],tupp[1],tupp[2])
    return (tup[0]*57885161+tup[1]*43112609+tup[2]*37156667)%len(hashmap)


    



def inside(tupp):
    tup = (tupp[0],tupp[1],tupp[2])
    if hashmap[Hash(tup)]!=[]:
        for num in hashmap[Hash(tup)]:
            if num[0:3] == tup:
                return True
            
def buried(tupp):
    buried = 0
    
    tup = (tupp[0],tupp[1],tupp[2])
    if not inside(tup):
        return 0
    if inside((tup[0]+1,tup[1],tup[2])):
        buried+=1
    if inside((tup[0]-1,tup[1],tup[2])):
        buried+=1
    if inside((tup[0],tup[1]+1,tup[2])):
        buried+=1
    if inside((tup[0],tup[1]-1,tup[2])):
        buried+=1
    if inside((tup[0],tup[1],tup[2]+1)):
        buried+=1
    if inside((tup[0],tup[1],tup[2]-1)):
        buried+=1
    if buried == 6:
        return True
    else:
        return False


            
def inside2(tupp):
    tup = (tupp[0],tupp[1],tupp[2])
    if hashmap[Hash(tup)]!=[]:
        for num in hashmap[Hash(tup)]:
            if num[0:4] == tupp:
                return True
    

            



def Hash2(tupp):
    
    tup = (tupp[0],tupp[1],tupp[2])
    #ret = ( int(tup[0]/chunk)*1049+int(tup[1]/chunk)*1123+int(tup[2]/chunk)*1217)  %  len(chunkmap)
    ret = ( int(tup[0]/chunk)*57885161+int(tup[2]/chunk)*37156667)%len(chunkmap)
    return ret
def above(tupp):
    i = 0
    tup = (tupp[0],tupp[1],tupp[2])
    if chunkmap[Hash2(tup)]!=[]:
        for num in chunkmap[Hash2(tup)]:
            if num[1] < tup[1] and num[0]==tup[0] and num[2]==tup[2]:
                i+=1
    return i
def Setup_Map(number):
    for num in range(number):
        hashmap.append([])
        chunkmap.append([])
        chunkmap2.append([])

def Hide(tupp):
    chunkmap2[Hash2(tupp)].append(tupp)    
    chunkmap[Hash2(tupp)].remove(tupp)
      
            
def Show(tupp):
    chunkmap[Hash2(tupp)].append(tupp)    
    chunkmap2[Hash2(tupp)].remove(tupp)

def inside_chunk(tupp):
    tup = (tupp[0],tupp[1],tupp[2])
    if chunkmap[Hash2(tup)]!=[]:
        for num in chunkmap[Hash2(tup)]:
            if num[0:3] == tup:
                return (True,num)
    return (False,0)
def inside_chunk2(tupp):
    tup = (tupp[0],tupp[1],tupp[2])
    if chunkmap2[Hash2(tup)]!=[]:
        for num in chunkmap2[Hash2(tup)]:
            if num[0:3] == tup:
                
                return (True,num)
    return (False,0)
            
def which(tupp):
    chunk2 = inside_chunk2(tupp)
    chunk1 = inside_chunk(tupp)
    
    if chunk2[0]:
        return (False,chunk2[1])
    
    if chunk1[0]:
        return (True,chunk1[1])
    return (False,0)
    
def update_block(tupp):

    whi = which(tupp)
    if buried(tupp):
        if whi[0]:
            Hide(whi[1])
    if not buried(tupp):
        if not whi[0] and whi[1]!=0:
            Show(whi[1])
        
def Place(tupp):
    tup = (tupp[0],tupp[1],tupp[2],tupp[3])
    if not inside(tupp):
        hashmap[Hash(tupp)].append(tupp)
        chunkmap[Hash2(tupp)].append(tupp)
        update_block((tup[0]+1,tup[1],tup[2]))
        update_block((tup[0]-1,tup[1],tup[2]))
        update_block((tup[0],tup[1]+1,tup[2]))
        update_block((tup[0],tup[1]-1,tup[2]))
        update_block((tup[0],tup[1],tup[2]+1))
        update_block((tup[0],tup[1],tup[2]-1)) 
        
            

        
def Remove(tupp):
    tup = (tupp[0],tupp[1],tupp[2])
    if inside(tupp):
        hashmap[Hash(tupp)].remove(tupp)
        chunkmap[Hash2(tupp)].remove(tupp)
        update_block((tup[0]+1,tup[1],tup[2]))
        update_block((tup[0]-1,tup[1],tup[2]))
        update_block((tup[0],tup[1]+1,tup[2]))
        update_block((tup[0],tup[1]-1,tup[2]))
        update_block((tup[0],tup[1],tup[2]+1))
        update_block((tup[0],tup[1],tup[2]-1))
def GetChunk(tupp):
    return chunkmap[Hash2(tupp)]



    
Setup_Map(5000000)




def update_chunks():
    cubes4 = []
    num = int(2*limit/chunk+2)
    for z in range(num):
        for x in range(num):
            #for y in range(num):
            #    chunkdrawing = GetChunk((PLAYER.x+x*chunk-num*chunk/2+chunk/2,PLAYER.y+y*chunk-num*chunk/2+chunk/2,PLAYER.z+z*chunk-num*chunk/2+chunk/2))

            chunkdrawing = GetChunk((PLAYER.x+x*chunk-num*chunk/2+chunk/2,0,PLAYER.z+z*chunk-num*chunk/2+chunk/2))
                
                
            cubes4+=(chunkdrawing)
    cubes4 = list(set(cubes4))
    
    return cubes4

    
    
    
def check_cube(cube,PLAYER):
    if math.sqrt((cube[0]-PLAYER.x)**2+(cube[1]-PLAYER.y)**2+(cube[2]-PLAYER.z)**2)<5:
        
        if PLAYER.x>=cube[0]-0.5 and PLAYER.x<=cube[0]+0.5 and PLAYER.y>=cube[1]-1.9 and PLAYER.y<=cube[1]+0.5 and PLAYER.z<=cube[2]-0.5 and PLAYER.z>=cube[2]-1:
            PLAYER.z = cube[2]-1
        elif PLAYER.x>=cube[0]-0.5 and PLAYER.x<=cube[0]+0.5 and PLAYER.y>=cube[1]-1.9 and PLAYER.y<=cube[1]+0.5 and PLAYER.z>=cube[2]+0.5 and PLAYER.z<=cube[2]+1:
            PLAYER.z = cube[2]+1
        elif PLAYER.z>=cube[2]-0.5 and PLAYER.z<=cube[2]+0.5 and PLAYER.y>=cube[1]-1.9 and PLAYER.y<=cube[1]+0.5 and PLAYER.x>=cube[0]+0.5 and PLAYER.x<=cube[0]+1:
            PLAYER.x = cube[0]+1
        elif PLAYER.z>=cube[2]-0.5 and PLAYER.z<=cube[2]+0.5 and PLAYER.y>=cube[1]-1.9 and PLAYER.y<=cube[1]+0.5 and PLAYER.x<=cube[0]-0.5 and PLAYER.x>=cube[0]-1:
            PLAYER.x = cube[0]-1
        elif PLAYER.x>=cube[0]-0.5 and PLAYER.x<=cube[0]+0.5 and PLAYER.z>=cube[2]-0.5 and PLAYER.z<=cube[2]+0.5 and PLAYER.y>=cube[1]+0.5 and PLAYER.y<=cube[1]+1:
            PLAYER.y = cube[1]+1
        elif PLAYER.x>=cube[0]-0.5 and PLAYER.x<=cube[0]+0.5 and PLAYER.z>=cube[2]-0.5 and PLAYER.z<=cube[2]+0.5 and PLAYER.y<=cube[1]-0.5 and PLAYER.y>=cube[1]-2:
            PLAYER.y = cube[1]-2
            PLAYER.velocity = 0
            PLAYER.JUMP()
            PLAYER.SLIDE(0.75)
        
            
            
        



def distance(p1,p2):
    return math.sqrt((p1[0]-p2[0])**2+(p1[1]-p2[1])**2+(p1[2]-p2[2])**2)
    
def light(cube,iii = 5):
    if cube[3] == 5:
        return 1
    distog = torch
    dist = distog
    lit = False
    for i in PLAYER.lightsources:
        if cube != i:
            dis = distance(i,cube)
            
            if dis <= dist:
                
                dist = dis
                lit = True
    penetration = 8/9
    if above(cube)>0 and iii>0:
        #return max((1/distog*(distog-dist)),1/(above(cube)*penetration+1))
        return max((1/distog*(distog-dist)),light((cube[0],cube[1]-1,cube[2],cube[3]),iii-1)*penetration)
    
    return max((1/distog*(distog-dist)),max(bg[0],bg[1],bg[2])/255)
                    
    
    

def change(noww):
    time = 128
    if noww==3:
        time = 1024
    if noww==0:
        time = 1024
    
    changer[0] = (cycle[(noww+1)%length][0]-cycle[noww][0])/time
    changer[1] = (cycle[(noww+1)%length][1]-cycle[noww][1])/time
    changer[2] = (cycle[(noww+1)%length][2]-cycle[noww][2])/time
    
def daylightcycle():
    
    if bg == list(cycle[(now+1)%length]):
        change((now+1)%length)
        return (now+1)%length
        
    bg[0]+=changer[0]
    bg[1]+=changer[1]
    bg[2]+=changer[2]
    return now

     
def draw_cube(cube,PLAYER):
    
    if (cube[0]-PLAYER.x)**2+(cube[1]-PLAYER.y)**2+(cube[2]-PLAYER.z)**2<=limit**2:
        
        buried = 0
            
        if inside((cube[0],cube[1],cube[2]-1,0)):
            buried += 1
        if inside((cube[0],cube[1],cube[2]+1,0)):
            buried += 1
        if inside((cube[0],cube[1]-1,cube[2],0)):
            buried += 1
        if inside((cube[0],cube[1]+1,cube[2],0)):
            buried += 1
        if inside((cube[0]+1,cube[1],cube[2],0)):
            buried += 1
        if inside((cube[0]-1,cube[1],cube[2],0)):
            buried += 1
        
        if buried<6:
            
        
        
            onscreen = False
            onscreen2 = False
            draw_sides = []
            draw_sides2 = []
            for face in faces:
                sides = []
                for vertex in (verticies[face[0]],verticies[face[1]],verticies[face[2]],verticies[face[3]]):
                    old_x = vertex[0]-PLAYER.x+cube[0]
                    old_y = vertex[1]-PLAYER.y+cube[1]
                    old_z = vertex[2]-PLAYER.z+cube[2]
                    
                    sides.append((old_x,old_y,old_z))
                    if onscreen2 == False:
                        old_z = (old_z*math.cos(PLAYER.anglex*math.pi/180)+old_x*math.sin(PLAYER.anglex*math.pi/180))*math.cos(PLAYER.angley*math.pi/180)+old_y*math.sin(PLAYER.angley*math.pi/180)
                        
                        if old_z>0:
                            onscreen2 = True
                
                x = (sides[0][0]+sides[1][0]+sides[2][0]+sides[3][0])
                y = (sides[0][1]+sides[1][1]+sides[2][1]+sides[3][1])
                z = (sides[0][2]+sides[1][2]+sides[2][2]+sides[3][2])
                dis = x**2+y**2+z**2
                draw_sides.append([dis,face])
                draw_sides2.append([dis,face])
                
                
            draw_sides2.sort()
            
                
            
                
            faces1 = faces[draw_sides.index(draw_sides2[0])]
            
            
            
            faces2 = faces[draw_sides.index(draw_sides2[1])]
            
            
            
            faces3 = faces[draw_sides.index(draw_sides2[2])]
            
            faces2draw = [faces3,faces2,faces1]
            
            if 1==2:
                faces4 = faces[draw_sides.index(draw_sides2[3])]

                faces5 = faces[draw_sides.index(draw_sides2[4])]

                faces6 = faces[draw_sides.index(draw_sides2[5])]

                faces2draw = [faces6,faces5,faces4,faces3,faces2,faces1]
            
            
            for face in faces2draw:                    
                    
                    
                if not(inside((cube[0],cube[1]+1,cube[2],cube[3])) and faces.index(face) == 3 or inside((cube[0],cube[1]-1,cube[2],cube[3])) and faces.index(face) == 0 or inside((cube[0]-1,cube[1],cube[2],cube[3])) and faces.index(face) == 4 or inside((cube[0]+1,cube[1],cube[2],cube[3])) and faces.index(face) == 5 or inside((cube[0],cube[1],cube[2]-1,cube[3])) and faces.index(face) == 1 or inside((cube[0],cube[1],cube[2]+1,cube[3])) and faces.index(face) == 2):
                
                
                    sides = []
                    for vertex in (verticies[face[0]],verticies[face[1]],verticies[face[2]],verticies[face[3]]):
                        old_x = vertex[0]-PLAYER.x+cube[0]
                        old_y = vertex[1]-PLAYER.y+cube[1]
                        old_z = vertex[2]-PLAYER.z+cube[2]
                        
                        #old_x,old_z = old_x*math.cos(PLAYER.anglex*math.pi/180)-old_z*math.sin(PLAYER.anglex*math.pi/180),old_z*math.cos(PLAYER.anglex*math.pi/180)+old_x*math.sin(PLAYER.anglex*math.pi/180)
                        #old_y,old_z = old_y*math.cos(PLAYER.angley*math.pi/180)-old_z*math.sin(PLAYER.angley*math.pi/180),old_z*math.cos(PLAYER.angley*math.pi/180)+old_y*math.sin(PLAYER.angley*math.pi/180)
                        aaa = old_x*math.cos(PLAYER.anglex*math.pi/180)-old_z*math.sin(PLAYER.anglex*math.pi/180)
                        old_z = old_z*math.cos(PLAYER.anglex*math.pi/180)+old_x*math.sin(PLAYER.anglex*math.pi/180)
                        old_x = aaa
                        old_y,old_z = old_y*math.cos(PLAYER.angley*math.pi/180)-old_z*math.sin(PLAYER.angley*math.pi/180),old_z*math.cos(PLAYER.angley*math.pi/180)+old_y*math.sin(PLAYER.angley*math.pi/180)

                        if old_z>0 or onscreen2 == True:
                            
                            if old_z<0:
                                old_z = 0
                            
                            #new_x = math.degrees(math.atan(old_x/(old_z+0.001)))/PLAYER.FOV*xval
                            #new_y = math.degrees(math.atan(old_y/(old_z+0.001)))/PLAYER.FOV*yval

                            new_x = PLAYER.calculation/(old_z+0.1) * old_x
                            new_y = PLAYER.calculation/(old_z+0.1) * old_y
                            
                            new_x+=xval/2
                            new_y+=yval/2
                            
                            if new_x>=0 and new_x<=xval and new_y>=0 and new_y<=yval:
                                onscreen = True
                            
                            sides.append((new_x,new_y))
                    if len(sides)==4 and onscreen == True:
                        
                        color = colors[cube[3]][faces.index(face)]
                        
                        colorx=color[0]
                        colory=color[1]
                        colorz=color[2]
                        
                        lightvar = light(cube)
                        cx=colorx*lightvar
                        cy=colory*lightvar
                        cz=colorz*lightvar
                        
                        color2 = (cx,cy,cz)
                        colorx=color2[0]
                        colory=color2[1]
                        colorz=color2[2]
                        
                        dis = (math.sqrt((cube[0]-PLAYER.x)**2+(cube[1]-PLAYER.y)**2+(cube[2]-PLAYER.z)**2)/limit)**3
                        if color[0]<bg[0]:
                            colorx = colorx+(bg[0]-colorx)*dis
                        if color[0]<bg[1]:
                            colory = colory+(bg[1]-colory)*dis
                        if color[0]<bg[2]:
                            colorz = colorz+(bg[2]-colorz)*dis
                        if color[0]>bg[0]:
                            colorx = colorx+(colorx-bg[0])*dis
                        if color[0]>bg[1]:
                            colory = colory+(colory-bg[1])*dis
                        if color[0]>bg[2]:
                            colorz = colorz+(colorz-bg[2])*dis
                        
                        color2 = (colorx,colory,colorz)
                        pygame.draw.polygon(wn,color2,(sides[0],sides[1],sides[2],sides[3]))
                        


PLAYER = PLAYER(cubes)

    
def draw(cubes3):
    
    wn.fill(bg)
    PLAYER.MOVE(cubes3)
    flag = False
    
    if PLAYER.chunkin != PLAYER.chunkin2:
        PLAYER.chunkin2 = PLAYER.chunkin
        cubes3 = update_chunks()
        flag = True
    PLAYER.chunkin = Hash2((PLAYER.x,PLAYER.y,PLAYER.z))
       
    
        
    cubes2 = []


    
    for cube in cubes3:
        cubes2.append(((cube[0]-PLAYER.x)**2+(cube[1]-PLAYER.y)**2+(cube[2]-PLAYER.z)**2,cube[0],cube[1],cube[2],cube[3]))
    
    cubes2.sort()
    cubes2.reverse()
    
    if cubes2!=[]:
        if PLAYER.mode == "survival":
            for cube in cubes2:
                    check_cube((cube[1],cube[2],cube[3],cube[4]),PLAYER)
        
        
        for cube in cubes2:
            draw_cube((cube[1],cube[2],cube[3],cube[4]),PLAYER)
        

    
            
    
    pygame.draw.rect(wn,(0,0,0),(xval//2-1,yval//2-10,2,20))
    pygame.draw.rect(wn,(0,0,0),(xval//2-10,yval//2-1,20,2))
    if flag:
        return cubes3

run = True
delay = 0
for cube in cubes:
    Place(cube)

w = random.randint(4,7)



whee = []
whee2 = []
for i in range(w):
    whee.append(random.randint(-100,100)/8)
    whee2.append(random.randint(-100,100)/8)
    
def noise(x1,z1,y1):
    
    scale = 20
    shrink = 20
    x,z = x1/scale,z1/scale
    y = 0
    for i in range(w):
        y+=whee[i]*math.sin(i*x)
        y+=whee2[i]*math.cos(i*z)

        
    y = 1/shrink*scale*y+y1
    
    if y < 10:
    
        return int(y)


noise1 = PerlinNoise(octaves=1)
noise2 = PerlinNoise(octaves=2)
noise3 = PerlinNoise(octaves=4)
noise4 = PerlinNoise(octaves=8)
def noise(x1,z1):
    
    a = 40
    y = noise1([x1/100,z1/100])*a
    y += 0.5*noise2([x1/100,z1/100])*a
    y += 0.25*noise3([x1/100,z1/100])*a
    y += 0.125*noise4([x1/100,z1/100])*a
    y -= 5
    y = int(y)
    for y2 in range(-y+6):
        r_i = 0
        cubes.append((x1,y+y2,z1,r_i))
        Place((x1,y+y2,z1,r_i))
    
for x in range(wide):
    for z in range(wide):
        
        noise(x,z)
 
for x in range(wide):
    for y in range(5):
        for z in range(wide):
            cubes.append((x,y+6,z,1))
            Place((x,y+6,z,1))

for x in range(wide):
    for y in range(6):
        for z in range(wide):
            if not inside((x,y,z,1)):
                cubes.append((x,y,z,6))
                Place((x,y,z,6))

                



    
change(now)
clock = pygame.time.Clock()
while run:
    
        
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False
        if event.type == pygame.VIDEORESIZE:
            xval = event.w
            yval = event.h
            surface = pygame.display.set_mode((event.w, event.h),pygame.RESIZABLE)
    now = daylightcycle()
    
    c = draw(cubes3)
    if c != None:
        cubes3 = c
    
    
    pygame.display.update()
    
    clock.tick(fps)
pygame.quit()

print(str(len(cubes))+" BLOCKS")
